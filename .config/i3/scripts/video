#! /usr/bin/env python3

import sys
import i3ipc
import time
import math
from collections import namedtuple, deque
from fractions import Fraction
from math import floor
from Xlib.display import Display


Rect = namedtuple("Rect", ["width", "height"])

i3 = i3ipc.Connection()


def command_with_log(cmd, append_focus=True):
    if append_focus:
        cmd = f'[con_mark="video"] {cmd}'

    print(cmd)
    return i3.command(cmd)


class State:
    def __init__(self):
        self.border = 20
        self.ratio = Fraction(5, 16)
        self.mark = "video"
        self._set_marks = None
        self._outputs = None
        self._workspaces = None
        self._current_workspace = None
        self._monitor = None
        self._window = None

    @property
    def set_marks(self):
        if self._set_marks is None:
            self._set_marks = i3.get_marks()

        return self._set_marks

    @property
    def outputs(self):
        if self._outputs is None:
            self._outputs = i3.get_outputs()

        return self._outputs

    @property
    def workspaces(self):
        if self._workspaces is None:
            self._workspaces = i3.get_workspaces()

        return self._workspaces

    @property
    def current_workspace(self):
        if self._current_workspace is None:
            for workspace in self.workspaces:
                if workspace.focused:
                    self._current_workspace = workspace.name

        return self._current_workspace

    @property
    def monitor(self):
        if self._monitor is None:
            for monitor in self.outputs:
                if monitor.current_workspace == self.current_workspace:
                    self._monitor = monitor.rect

        return self._monitor

    @property
    def window(self):
        if self._window is None:
            self._window = Rect(
                floor(self.monitor.width * self.ratio),
                floor(self.monitor.height * self.ratio),
            )

        return self._window

    @window.setter
    def window(self, window):
        self._window = window


class ArgumentError(Exception):
    def __init__(self, cmd, msg):
        self.cmd = cmd
        self.msg = msg

    def __str__(self):
        return f"invalid arguments for {self.cmd}: {self.msg}"


def border(args, state):
    b = int(args.popleft())
    state.border = b


def ratio(args, state):
    n = int(args.popleft())
    d = int(args.popleft())
    state.ratio = Fraction(n, d)


def get_video_window():
    video_windows = [win for win in i3.get_tree().leaves() if "video" in win.marks]
    assert len(video_windows) == 1
    return video_windows[0]


def resize(_, state):
    if not check_size(state.window, get_video_window().window):
        return
    command_with_log(f"resize set {state.window.width} px {state.window.height} px")


def get_window(display, window_id=None):
    if window_id is None:
        win = display.get_input_focus().focus
        if win.get_wm_class() is None and win.get_wm_name() is None:
            win = win.query_tree().parent
    else:
        win = display.create_resource_object("window", window_id)
    return win


def check_size(desired_size, window_id=None):
    d = Display()
    win = get_window(d, window_id)
    hints = win.get_wm_normal_hints()
    d.flush()
    d.close()
    return (
        desired_size.width >= hints.min_width
        and desired_size.height >= hints.min_height
    )


def dynamic_resize_base(args, state):
    ratio = Fraction(int(args.popleft()), int(args.popleft()))
    width = floor(ratio * state.monitor.width)
    height = floor(ratio * state.monitor.height)
    window = get_video_window()
    pos_mark = [mark for mark in window.marks if mark != state.mark]
    assert len(pos_mark) == 1
    args.extendleft([pos_mark[0], "move"])
    return width, height


def decrement(args, state):
    width, height = dynamic_resize_base(args, state)
    window = get_video_window()
    window.rect.width -= width
    window.rect.height -= height

    if not check_size(window.rect, window.window):
        return

    if "left" in window.marks:
        command_with_log(
            f"resize shrink up {height} px, resize shrink right {width} px"
        )
    else:
        command_with_log(f"resize shrink up {height} px, resize shrink left {width} px")


def increment(args, state):
    width, height = dynamic_resize_base(args, state)
    window = get_video_window()
    if "left" in window.marks:
        command_with_log(f"resize grow up {height} px, resize grow right {width} px")
    else:
        command_with_log(f"resize grow up {height} px, resize grow left {width} px")


def move(args, state, animate_move=True):
    def animate(direction, total, duration, refresh_rate=60):
        interval = 1 / refresh_rate
        num_pixels = min(2 * math.ceil(total / (duration / interval)), 150)
        print(total, num_pixels)
        orig_total = total
        orig_num_pixels = num_pixels
        while True:
            assert total >= 0
            if total == 0:
                break
            elif total < num_pixels:
                num_pixels = total
            else:
                num_pixels = math.ceil(orig_num_pixels / (orig_total / total))
            print(total)
            start = time.time()
            command_with_log(f"move {direction} {num_pixels}px")
            total -= num_pixels
            end = time.time()
            remain = start + interval - end
            if remain > 0:
                time.sleep(remain)

    move_pos = args.popleft()
    if move_pos not in ["left", "center", "right"]:
        raise ValueError(f"invalid movement position {move_pos}")

    window = get_video_window().rect

    x = 0
    y = 0
    if move_pos == "left":
        x = state.border
        y = state.monitor.height - state.border - window.height
    elif move_pos == "center":
        x = (state.monitor.width - window.width) // 2
        y = (state.monitor.height - window.height) // 2
    elif move_pos == "right":
        x = state.monitor.width - state.border - window.width
        y = state.monitor.height - state.border - window.height

    command_with_log(
        f'unmark left, unmark right, unmark center, mark --add {move_pos}; mode "default"'
    )
    if not animate_move or window.y != y:
        command_with_log(f"move position {x}px {y}px")
    else:
        animate(move_pos, abs(x - window.x), 0.2)


def hide(_, state):
    command_with_log(f'[con_mark="video"] scratchpad show', False)


def reset(_1, _2):
    command_with_log(";".join(["focus tiling", 'mode "default"']), False)


def setup(args, state):
    if "video" in i3.get_marks():
        command_with_log(f'mode "{state.mark}"', False)
        args.clear()
        return

    args.append("center")
    command_with_log(
        ";".join(
            [
                f"mode {state.mark}",
                "fullscreen disable",
                "sticky enable",
                f"mark {state.mark}",
                "move to scratchpad",
                f'[con_mark="video"] scratchpad show',
                "border none",
            ]
        ),
        False,
    )


def center(args, state):
    command_with_log("move position center", True)


argparsers = {
    "border": border,
    "center": center,
    "decrement": decrement,
    "hide": hide,
    "increment": increment,
    "move": move,
    "ratio": ratio,
    "reset": reset,
    "resize": resize,
    "setup": setup,
}


def main():
    state = State()
    args = deque(sys.argv[1:])
    print(args)
    try:
        while len(args) != 0:
            arg = args.popleft()
            try:
                argparsers[arg](args, state)
            except ValueError as ve:
                raise ArgumentError(arg, str(ve))
    except KeyError as ke:
        print(f"invalid argument: {ke}")
    except ArgumentError as ve:
        print(ve)


if __name__ == "__main__":
    main()
